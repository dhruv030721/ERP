// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AttendanceType {
  PRESENT
  ABSENT
  LEAVE
}

enum Gender {
  MALE
  FEMALE
}

enum LectureType {
  LECTURE
  LAB
}

enum UserRole {
  ADMIN
  STUDENT
  FACULTY
}

model User {
  id      String    @id @default(uuid())
  role    UserRole
  user_id String    @unique
  Student Student[] @relation("student_user")
  Faculty Faculty[] @relation("faculty_user")
}

model Token {
  id      String    @id @unique
  Student Student[] @relation("student_user_token")
  Faculty Faculty[] @relation("faculty_user_token")
  token   String
}

model Student {
  enrollmentNo       String       @unique
  first_name         String
  middle_name        String
  last_name          String
  mobileNumber       String       @id
  dob                DateTime?
  password           String
  gender             String
  email              String
  parentMobileNumber String
  address            String?
  branch             Branch       @relation("student_branch", fields: [branchId], references: [id])
  sem                Int
  Attendance         Attendance[] @relation("attendance_enrollmentno")
  branchId           String
  User               User?        @relation("student_user", fields: [mobileNumber], references: [user_id])
  Token              Token?       @relation("student_user_token", fields: [tokenId], references: [id])
  tokenId            String?
}

model Faculty {
  first_name       String
  middle_name      String
  last_name        String
  mobileNumber     String          @id @unique
  dob              DateTime?
  password         String?
  gender           String
  email            String
  assignedSubjects AssignSubject[] @relation("assignsubject_faculty")
  TimeTable        TimeTable[]     @relation("timetable_facultyid")
  Attendance       Attendance[]    @relation("attendance_facultyid")
  User             User?           @relation("faculty_user", fields: [mobileNumber], references: [user_id])
  tokenId          String?
  Token            Token?          @relation("faculty_user_token", fields: [tokenId], references: [id])
}

model Subject {
  code             Int             @id @unique
  name             String
  branch           Branch          @relation("subject_branch", fields: [branchId], references: [id])
  sem              Int
  assignedSubjects AssignSubject[] @relation("assignsubject_subject")
  Attendance       Attendance[]    @relation("attendance_subject")
  branchId         String
}

model AssignSubject {
  id          String      @id @default(uuid())
  sem         Int
  branch      Branch      @relation("assignsubject_branch", fields: [branchId], references: [id])
  subjectCode Int
  subject     Subject     @relation("assignsubject_subject", fields: [subjectCode], references: [code])
  facultyId   String?
  faculty     Faculty?    @relation("assignsubject_faculty", fields: [facultyId], references: [mobileNumber])
  branchId    String
  type        LectureType @default(LECTURE)
}

model TimeTable {
  id          String      @id @default(uuid())
  time        String
  day         String
  subject     String
  faculty     Faculty     @relation("timetable_facultyid", fields: [facultyId], references: [mobileNumber])
  facultyId   String
  lectureType LectureType
  batch       String?
  branch      Branch      @relation("timetable_branch", fields: [branchId], references: [id])
  sem         Int
  branchId    String
}

model Attendance {
  id                  String         @id @default(uuid())
  time                String
  date                DateTime
  day                 String
  sem                 Int
  branch              String
  subject             Subject        @relation("attendance_subject", fields: [subjectCode], references: [code])
  subjectCode         Int
  enrollmentNo        Student        @relation("attendance_enrollmentno", fields: [studentEnrollmentNo], references: [enrollmentNo])
  studentEnrollmentNo String
  facultyId           Faculty        @relation("attendance_facultyid", fields: [facultyEmployeeId], references: [mobileNumber])
  facultyEmployeeId   String
  status              AttendanceType
}

model Branch {
  id            String          @id
  name          String
  Student       Student[]       @relation("student_branch")
  AssignSubject AssignSubject[] @relation("assignsubject_branch")
  TimeTable     TimeTable[]     @relation("timetable_branch")
  Subject       Subject[]       @relation("subject_branch")
}
