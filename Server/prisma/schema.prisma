// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AttendanceType {
  Present
  Absent
  Leave
}

enum LectureType {
  LECTURE
  LAB
}

model Student {
  enrollmentNo       String       @id @unique
  name               String
  mobileNumber       String
  dob                DateTime?
  password           String
  email              String
  parentMobileNumber String
  address            String?
  branch             Branch       @relation(fields: [branchId], references: [id])
  sem                Int
  // Optional: If a student can enroll in multiple subjects
  Attendance         Attendance[]
  branchId           String
}

model Faculty {
  employeeId       String          @id @unique
  name             String
  mobileNumber     String
  dob              DateTime?
  password         String
  email            String
  address          String?
  branch           Branch          @relation(fields: [branchId], references: [id])
  sem              Int
  // Optional: If a faculty can teach multiple subjects
  assignedSubjects AssignSubject[]
  TimeTable        TimeTable[]
  Attendance       Attendance[]
  branchId         String
}

model Subject {
  code             Int             @id @unique
  name             String
  branch           Branch          @relation(fields: [branchId], references: [id])
  sem              Int
  assignedSubjects AssignSubject[]
  Attendance       Attendance[]
  branchId         String
}

model AssignSubject {
  id          String   @id @default(uuid())
  sem         Int
  branch      Branch   @relation(fields: [branchId], references: [id])
  subjectCode Int
  subject     Subject  @relation(fields: [subjectCode], references: [code])
  facultyId   String?
  faculty     Faculty? @relation(fields: [facultyId], references: [employeeId])
  branchId    String
}

model TimeTable {
  id          String      @id @default(uuid())
  time        String
  day         String
  subject     String
  faculty     Faculty     @relation(fields: [facultyId], references: [employeeId])
  facultyId   String
  lectureType LectureType
  batch       String?
  branch      Branch      @relation(fields: [branchId], references: [id])
  sem         Int
  branchId    String
}

model Attendance {
  id                  String         @id @default(uuid())
  time                String
  date                DateTime
  day                 String
  sem                 Int
  branch              String
  subject             Subject        @relation(fields: [subjectCode], references: [code])
  subjectCode         Int
  enrollmentNo        Student        @relation(fields: [studentEnrollmentNo], references: [enrollmentNo])
  studentEnrollmentNo String
  facultyId           Faculty        @relation(fields: [facultyEmployeeId], references: [employeeId])
  facultyEmployeeId   String
  status              AttendanceType
}

model Branch {
  id            String          @id
  name          String
  Student       Student[]
  Faculty       Faculty[]
  AssignSubject AssignSubject[]
  TimeTable     TimeTable[]
  Subject       Subject[]
}
